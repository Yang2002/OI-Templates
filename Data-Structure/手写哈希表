const int HASHSIZE = 100033, KEYSIZE = 102000;

template<typename Key, typename Mapped>
struct HashMap {
    typedef pair<Key, Mapped> pii;
    pair<Key, Mapped> *End, kv[KEYSIZE];
    int head[HASHSIZE], nxt[HASHSIZE], tot;

    HashMap() { clear(); End = new pair<Key, Mapped>; }
    pii* end() { return End; }
    inline void clear() {
        memset(head, 0, sizeof head);
        tot = 0;
    }
    inline void insert(const Key& x, const Mapped& y) {
        kv[++tot] = make_pair(x, y);
        int xm = x % HASHSIZE, id = tot;
        nxt[id] = head[xm];
        head[xm] = id;
    }
    inline pii* find(const Key& x) {
        int xm = x % HASHSIZE;
        for(int _p = head[xm]; _p; _p = nxt[_p]) {
            if(kv[_p].first == x) return kv + _p;
        }
        return End;
    }
    Mapped& operator [] (const Key& idx) {
        if(find(idx) == End) insert(idx, 0);
        return find(idx)->second;
    }
};
