// using the Eulerian order to convert LCA problem into RMQ
// O(nlogn) precalculate and O(1) for each qurey
// Precalculate can be optimized to O(n)

#include<bits/stdc++.h>
#define REP(i,n) for(int i = 0; i < n; ++i)
#define rep(i,n) for(int i = 1; i <= n; ++i)
#define boost ios::sync_with_stdio(0)
#define ms0(s) memset((s), 0, sizeof(s))
#define INF 0x3f3f3f3f
#define ABS(x) ((x)<0 ? (-(x)) : (x))
#define forvec(it,v) for(vector<int>::iterator it = v.begin(); it != v.end(); ++it)

#ifdef LOCAL
#define DEBUG 1
#else
#define DEBUG 0
#endif
#define $ if(DEBUG)
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

//quick I/O
ostream& operator << (ostream& out, const pii& p){
	out << "(" << p.first << ", " << p.second << ")";
	return out;
}
template <typename T>
inline void read(T& x){
	int w = 1; T data = 0;
	char ch = getchar();
	while(!isdigit(ch) && ch != '-') ch = getchar();
	if(ch == '-') w = -1, ch = getchar();
	while(isdigit(ch))
		data = 10 * data + ch - '0', ch = getchar();
	x = data * w;
}
template <typename T>
void write(T x){
	 if (x < 0) putchar('-'),x = ~x + 1;
	 if (x > 9) write(x / 10);
	 putchar( x % 10 + '0');
}

const int maxn = 500020;
int head[maxn], k = 0;
struct node{
    int v,next;
}e[maxn*2];
void add(int u,int v)
{
    e[k].v = v;
    e[k].next = head[u];
    head[u] = k++;
}
int dfn[maxn],dfninv[maxn], euler[maxn<<2], fi[maxn], n, q, root, dfnrk = 1, erlrk = 1;
void dfs(int v, int fa){
	int m = dfnrk;
	dfn[v] = m;
	dfninv[m] = v;
	euler[erlrk] = m;
	if(!fi[dfnrk]) fi[dfnrk] = erlrk;
	dfnrk++, erlrk++;
	for(int i = head[v], u = e[i].v ; i != -1; i = e[i].next, u = e[i].v ) if(u != fa){
		dfs(u, v);
		euler[erlrk++] = m;
	}
}
int d[maxn<<2][30];
inline void RMQ_init(){
	int n = erlrk - 1;
	rep(i, n) d[i][0] = euler[i];
	for(int j = 1; (1<<j) <= n; ++j)
		for(int i = 1; i + (1<<j) - 1 <= n; ++i)
			d[i][j] = min(d[i][j-1], d[i+(1<<(j-1))][j-1]);
}
int RMQ(int l, int r){
	int k = 0;
	while((1<<(k+1)) <= r - l + 1) k++;
	return min(d[l][k], d[r-(1<<k)+1][k]);
}
int main()
{
 	#ifdef FREOPEN
		freopen("in.txt", "r", stdin);
		//freopen("out.txt", "w", stdout);
 		clock_t starttime = clock();
	#endif
	memset(head, -1, sizeof head);
	read(n), read(q), read(root);
	rep(i, n-1){
		int x, y;
		read(x), read(y);
		add(x, y);
		add(y, x);
	}
	dfs(root, 0);
	RMQ_init();
	while(q--){
		int x, y; read(x), read(y);
		x = fi[dfn[x]], y = fi[dfn[y]];
		if(x > y) swap(x, y);
		write(dfninv[RMQ(x, y)]), putchar('\n');
	}
	#ifdef FREOPEN
		freopen("CON", "w", stdout);
		printf( "\n\n-----------------\n%ld ms are used.\n", clock() - starttime );
	#endif
	return 0;
}

