// O(nlogn) Precalculate and O(1) per query
// LCA::solve() is to test the algorithm
// Input format:
// n, q, root
// n-1 lines describes edges x <-> y
// q lines describes queries lca(x, y)
#include<bits/stdc++.h>
#define rep(i, n) for(int i = 1; i <= (n); ++i)
using namespace std;
typedef long long ll;
const int maxn = 500020, maxm = 1000020;
namespace adjlist{
    int n, m, ecnt = 0, head[maxn], nxt[maxm];
    struct edge{
        int from, to;
        edge(int x = 0, int y = 0) : from(x), to(y) {}
    } e[maxm];
    inline void init(int sz){
        memset(head, 0, sizeof(int) * (sz + 10));
        ecnt = 0;
    }
    inline void addedge(int x, int y){
        e[++ecnt] = edge(x, y);
        nxt[ecnt] = head[x];
        head[x] = ecnt;
    }
}

namespace LCA{
    using namespace adjlist;
    int st[maxn << 1][30], euler[maxn << 1], dep[maxn << 1], fir[maxn], len;
    inline int mn(int x, int y) {return dep[x] < dep[y] ? x : y;}
    void dfs(int v, int fa, int depth) {
        euler[++len] = v, dep[len] = depth, fir[v] = len;
        for(int i = head[v]; i; i = nxt[i]) if(e[i].to != fa) {
            dfs(e[i].to, v, depth + 1);
            euler[++len] = v, dep[len] = depth;
        }
    }
    inline void init(int root) {
        len = 0;
        dfs(root, -1, 1);
        for(int i = 1; i <= len; ++i) st[i][0] = i;
        for(int j = 1; (1 << j) <= len; ++j) 
            for(int i = 1; i + (1 << j) - 1 <= len; ++i)
                st[i][j] = mn(st[i][j-1], st[i+(1<<(j-1))][j-1]);
    }
    inline int lca(int x, int y) {
        int l = fir[x], r = fir[y];
        if(l > r) swap(l, r);
        int k = log2(r - l + 1.00);
        return euler[mn(st[l][k], st[r- (1<<k) + 1][k])];
    }
    inline void solve(){
        int rt, q;
        scanf("%d%d%d", &n, &q, &rt);
        adjlist::init(n);
        m = (n - 1) << 1;
        rep(i, n - 1) {
            int x, y; scanf("%d%d", &x, &y); 
            addedge(x, y), addedge(y, x);
        }
        init(rt);
        while(q--){
            int x, y; scanf("%d%d", &x, &y);
            printf("%d\n", lca(x, y) );
        }
    }
}
int main(){
    LCA::solve();
}
